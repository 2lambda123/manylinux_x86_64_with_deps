 # Boost.Build Configuration
# Automatically generated by bootstrap.sh

import option ;
import feature ;

# Compiler configuration. This definition will be used unless
# you already have defined some toolsets in your user-config.jam
# file.
if ! gcc in [ feature.values <toolset> ]
{
    using gcc ; 
}

project : default-build <toolset>gcc ;

# Python configuration
import python ;
if ! [ python.configured ]
{
 using python 
  : 3.7 # version 
  : /opt/python/cp37-cp37m/bin/python # executable
  : /opt/python/cp37-cp37m/include/python3.7m # includes 
  : /opt/python/cp37-cp37m/libs # libs 
  ;
 using python 
  : 3.6 # version 
  : /opt/python/cp36-cp36m/bin/python # executable
  : /opt/python/cp36-cp36m/include/python3.6m # includes 
  : /opt/python/cp36-cp36m/libs # libs 
  ;  
 using python 
  : 2.7 # version 
  : /opt/python/cp27-cp27m/bin/python # executable
  : /opt/python/cp27-cp27m/include/python2.7 # includes 
  : /opt/python/cp27-cp27m/libs # libs 
  ;  
using python 
  : 2.6 # version 
  : /opt/python/cp27-cp27mu/bin/python # executable
  : /opt/python/cp27-cp27mu/include/python2.7 # includes 
  : /opt/python/cp27-cp27mu/libs # libs 
  ;  
}

# List of --with-<library> and --without-<library>
# options. If left empty, all libraries will be built.
# Options specified on the command line completely
# override this variable.
libraries =  ;

# These settings are equivivalent to corresponding command-line
# options.
option.set prefix : /usr/local ;
option.set exec-prefix : /usr/local ;
option.set libdir : /usr/local/lib ;
option.set includedir : /usr/local/include ;

# Stop on first error
option.set keep-going : false ;

 
 
 
